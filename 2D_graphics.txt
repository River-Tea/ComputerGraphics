// ===== shape.h =====
void add_rectangle(int x1, int y1, int x2, int y2) {
	this->add_line(x1, y1, x2, y1);
	this->add_line(        x2, y1, x2, y2);
	this->add_line(                x2, y2, x1, y2);
	this->add_line(                        x1, y2, x1, y1);
}

void add_triangle(int x1, int y1, int x2, int y2, int x3, int y3)
{
	this->add_line(x1, y1, x2, y2);
	this->add_line(x2 + 1, y2 + 1, x3, y3);
	this->add_line(x3, y3, x1, y1);
}

// ===== 2D_graphics.cpp =====
#include "UserTable.h"
#include "Rectang.h"
#include "ShapeList.h"  

using namespace std;


int main()
{
	initwindow(1790, 770);
	Painter::fill_background(WHITE);
	UserTable user_table;

	//===== The sun =====
	Shape theSun;
	int x = 50, y = 10;
	theSun.add_circle(0 + x, 30 - y, 7);
	theSun.add_line(0 + x, 40 - y, 0 + x, 45 - y);
	theSun.add_line(-8 + x, 37 - y, -13 + x, 40 - y);
	theSun.add_line(-10 + x, 30 - y, -15 + x, 30 - y);
	theSun.add_line(-8 + x, 23 - y, -13 + x, 20 - y);
	theSun.add_line(0 + x, 20 - y, 0 + x, 15 - y);
	theSun.add_line(8 + x, 37 - y, 12 + x, 39 - y);
	theSun.add_line(8 + x, 23 - y, 12 + x, 20 - y);
	theSun.add_line(10 + x, 30 - y, 15 + x, 30 - y);

	user_table.draw_shape(&theSun, LIGHTRED);

	//===== Air_balloon =====
	Shape hotAirBalloonShape;
	hotAirBalloonShape.add_circle(-55, 51, 9);
	hotAirBalloonShape.add_line(-62, 45, -60, 40);
	hotAirBalloonShape.add_line(-48, 45, -50, 40);
	hotAirBalloonShape.add_line(-60, 39, -50, 39);
	hotAirBalloonShape.add_line(-60, 34, -50, 34);
	hotAirBalloonShape.add_line(-60, 34, -60, 39);
	hotAirBalloonShape.add_line(-50, 34, -50, 39);

	user_table.draw_shape(&hotAirBalloonShape, LIGHTMAGENTA);

	while (true)
	{
		//===== Mountain ===== 
		Shape mountain_shape;
		mountain_shape.add_triangle(-105, 0, -80, 50, -55, 0);
		mountain_shape.add_triangle(-55, 0, -30, 35, 0, 0);
		// Fill first mountain
		mountain_shape.add_line(-95, 0, -75, 40);
		mountain_shape.add_line(-85, 0, -70, 31);
		mountain_shape.add_line(-75, 0, -65, 22);
		mountain_shape.add_line(-65, 0, -60, 11);
		// Fill second mountain
		mountain_shape.add_line(-45, 0, -24, 28);
		mountain_shape.add_line(-35, 0, -20, 20);
		mountain_shape.add_line(-25, 0, -14, 14);
		mountain_shape.add_line(-15, 0, -8, 8);

		user_table.draw_shape(&mountain_shape, DARKGRAY);
		user_table.draw_shape(mountain_shape.get_symmetry_oy(), DARKGRAY);

		// Water wheel
		Shape waterWheel;
		waterWheel.add_circle(-60, -15, 1);
		waterWheel.add_circle(-60, -15, 7);
		waterWheel.add_line(-60, -14, -60, -9);
		waterWheel.add_line(-61, -14, -66, -11);
		waterWheel.add_line(-61, -16, -66, -18);
		waterWheel.add_line(-60, -16, -60, -21);
		waterWheel.add_line(-59, -16, -54, -18);
		waterWheel.add_line(-59, -14, -54, -12);
		waterWheel.add_circle(-60, -15, 8);
		waterWheel.add_line(-57, -23, -54, -30);
		waterWheel.add_line(-56, -23, -53, -30);
		waterWheel.add_line(-64, -23, -67, -30);
		waterWheel.add_line(-63, -23, -66, -30);
		waterWheel.add_line(-63, -26, -56, -26);
		waterWheel.add_line(-64, -27, -55, -27);

		user_table.draw_shape(&waterWheel, MAGENTA);

		//===== Grass =====
		Shape grass;
		// line
		grass.add_line(-20, -1, -60, -62);
		grass.add_line(-60, -62, -105, -62);
		grass.add_line(-105, -62, -105, -1);

		user_table.draw_shape(&grass, LIGHTGREEN);
		user_table.draw_shape(grass.get_symmetry_oy(), LIGHTGREEN);
		
		//===== The house =====
		// the bone
		Shape theHouse;
		theHouse.add_rectangle(50, -20, 70, -40);
		theHouse.add_triangle(50, -20, 59, -11, 70, -20);
		// the roof
		Shape houseFurnitures;
		houseFurnitures.add_rectangle(52, -22, 58, -28);
		houseFurnitures.add_line(55, -22, 55, -28);
		houseFurnitures.add_line(52, -25, 58, -25);
		houseFurnitures.add_rectangle(61, -30, 67, -40);
		houseFurnitures.add_pixel(63, -35);

		user_table.draw_shape(&theHouse, RED);
		user_table.draw_shape(&houseFurnitures, LIGHTBLUE);

		//===== Trees =====
		// Trunks
		Shape trunks;
		trunks.add_line(91, -47, 91,-20);
		trunks.add_line(91, -40, 82, -35);
		trunks.add_line(91, -37, 97, -32);
		// Leaves
		Shape leaves;
		leaves.add_circle(91, -20, 9);
		leaves.add_circle(97, -32, 4);
		leaves.add_circle(82, -35, 7);

		user_table.draw_shape(&leaves, GREEN);
		user_table.draw_shape(&trunks, BROWN);
		user_table.draw_shape(trunks.get_symmetry_oy(), BROWN);
		user_table.draw_shape(leaves.get_symmetry_oy(), GREEN);

		//===== Sunrise =====
		delay(50);
		// Clear
		user_table.clear_shape(&theSun);
		user_table.clear_shape(theSun.get_symmetry_oy());
		// Moving
		theSun.move_up();
		// Draw again
		user_table.draw_shape(&theSun, LIGHTRED);


		// cach lam cho hinh chuyen dong :
		delay(1);
		// buoc 1: xoa hinh cu~
		user_table.clear_shape(&hotAirBalloonShape);
		// buoc 2: cap nhat trang thai hinh cu sang trang thai moi
		hotAirBalloonShape.move_right(); // cau truc 1 cau : chu ngu + vi ngu : S + V :
		// buoc 3 : ve hinh moi
		user_table.draw_shape(&hotAirBalloonShape, LIGHTMAGENTA);
		
	}

	getchar();
	return 0;
}

// ===== 3D graphics =====

class Point3D
{
public:
	int x;
	int y;
	int z;
	Point3D(int x, int y, int z)
	{
		this->x = x;
		this->y = y;
		this->z = z;
	}
};

vector<Point3D*> point_3d;

point_3d.push_back(new Point3D(beginx, beginy + width, beginz)); //A
point_3d.push_back(new Point3D(beginx + length, beginy + width, beginz)); //B
point_3d.push_back(new Point3D(beginx + length, beginy, beginz)); // C
point_3d.push_back(new Point3D(beginx, beginy, beginz)); // D
point_3d.push_back(new Point3D(beginx, beginy + width, beginz + height)); // E
point_3d.push_back(new Point3D(beginx + length, beginy + width, beginz + height)); // F
point_3d.push_back(new Point3D(beginx + length, beginy, beginz + height)); // G
point_3d.push_back(new Point3D(beginx, beginy, beginz + height)); // H

vector<Point*> point_list;
			
point_list.push_back(new Point(point_3d[0]->x - point_3d[0]->y/sqrt(2), point_3d[0]->z - point_3d[0]->y/sqrt(2)));//A
point_list.push_back(new Point(point_3d[1]->x - point_3d[1]->y / sqrt(2), point_3d[1]->z - point_3d[1]->y / sqrt(2))); // B
point_list.push_back(new Point(point_3d[2]->x - point_3d[2]->y / sqrt(2), point_3d[2]->z - point_3d[2]->y / sqrt(2))); // C
point_list.push_back(new Point(point_3d[3]->x - point_3d[3]->y / sqrt(2), point_3d[3]->z - point_3d[3]->y / sqrt(2))); // D
point_list.push_back(new Point(point_3d[4]->x - point_3d[4]->y / sqrt(2), point_3d[4]->z - point_3d[4]->y / sqrt(2))); // E
point_list.push_back(new Point(point_3d[5]->x - point_3d[5]->y / sqrt(2), point_3d[5]->z - point_3d[5]->y / sqrt(2))); // F
point_list.push_back(new Point(point_3d[6]->x - point_3d[6]->y / sqrt(2), point_3d[6]->z - point_3d[6]->y / sqrt(2))); // G
point_list.push_back(new Point(point_3d[7]->x - point_3d[7]->y / sqrt(2), point_3d[7]->z - point_3d[7]->y / sqrt(2))); // H

Shape* shape = new Shape;
	
shape->add_line(point_list[0]->x, point_list[0]->y, point_list[1]->x, point_list[1]->y);//AB
shape->add_line(point_list[2]->x, point_list[2]->y, point_list[3]->x, point_list[3]->y);//CD
shape->add_line(point_list[3]->x, point_list[3]->y, point_list[0]->x, point_list[0]->y);//DA
shape->add_line(point_list[1]->x, point_list[1]->y, point_list[2]->x, point_list[2]->y);//BC	
shape->add_line_net_dut(point_list[4]->x, point_list[4]->y, point_list[5]->x, point_list[5]->y);//EF
shape->add_line_net_dut(point_list[5]->x, point_list[5]->y, point_list[6]->x, point_list[6]->y);//FG
shape->add_line(point_list[6]->x, point_list[6]->y, point_list[7]->x, point_list[7]->y);//GH
shape->add_line(point_list[7]->x, point_list[7]->y, point_list[4]->x, point_list[4]->y);//HE
shape->add_line(point_list[0]->x, point_list[0]->y, point_list[4]->x, point_list[4]->y);//AE
shape->add_line_net_dut(point_list[1]->x, point_list[1]->y, point_list[5]->x, point_list[5]->y);//BF
shape->add_line(point_list[2]->x, point_list[2]->y, point_list[6]->x, point_list[6]->y);//CG
shape->add_line(point_list[3]->x, point_list[3]->y, point_list[7]->x, point_list[7]->y);//DH