// ===== shape.h =====
void add_triangle(int x1, int y1, int x2, int y2, int x3, int y3)
{
	this->add_line(x1, y1, x2, y2);
	this->add_line(x2 + 1, y2 + 1, x3, y3);
	this->add_line(x3, y3, x1, y1);
}

// ===== 3D graphics =====
class Point3D
{
public:
	int x;
	int y;
	int z;
	Point3D(int x, int y, int z)
	{
		this->x = x;
		this->y = y;
		this->z = z;
	}
};

vector<Point3D*> point_3d;

point_3d.push_back(new Point3D(beginx, beginy + width, beginz)); //A
point_3d.push_back(new Point3D(beginx + length, beginy + width, beginz)); //B
point_3d.push_back(new Point3D(beginx + length, beginy, beginz)); // C
point_3d.push_back(new Point3D(beginx, beginy, beginz)); // D
point_3d.push_back(new Point3D(beginx, beginy + width, beginz + height)); // E
point_3d.push_back(new Point3D(beginx + length, beginy + width, beginz + height)); // F
point_3d.push_back(new Point3D(beginx + length, beginy, beginz + height)); // G
point_3d.push_back(new Point3D(beginx, beginy, beginz + height)); // H

vector<Point*> point_list;
			
point_list.push_back(new Point(point_3d[0]->x - point_3d[0]->y/sqrt(2), point_3d[0]->z - point_3d[0]->y/sqrt(2)));//A
point_list.push_back(new Point(point_3d[1]->x - point_3d[1]->y/sqrt(2), point_3d[1]->z - point_3d[1]->y/sqrt(2))); // B
point_list.push_back(new Point(point_3d[2]->x - point_3d[2]->y/sqrt(2), point_3d[2]->z - point_3d[2]->y/sqrt(2))); // C
point_list.push_back(new Point(point_3d[3]->x - point_3d[3]->y/sqrt(2), point_3d[3]->z - point_3d[3]->y/sqrt(2))); // D
point_list.push_back(new Point(point_3d[4]->x - point_3d[4]->y/sqrt(2), point_3d[4]->z - point_3d[4]->y/sqrt(2))); // E
point_list.push_back(new Point(point_3d[5]->x - point_3d[5]->y/sqrt(2), point_3d[5]->z - point_3d[5]->y/sqrt(2))); // F
point_list.push_back(new Point(point_3d[6]->x - point_3d[6]->y/sqrt(2), point_3d[6]->z - point_3d[6]->y/sqrt(2))); // G
point_list.push_back(new Point(point_3d[7]->x - point_3d[7]->y/sqrt(2), point_3d[7]->z - point_3d[7]->y/sqrt(2))); // H

Shape* shape = new Shape;
	
shape->add_line(point_list[0]->x, point_list[0]->y, point_list[1]->x, point_list[1]->y);//AB
shape->add_line(point_list[2]->x, point_list[2]->y, point_list[3]->x, point_list[3]->y);//CD
shape->add_line(point_list[3]->x, point_list[3]->y, point_list[0]->x, point_list[0]->y);//DA
shape->add_line(point_list[1]->x, point_list[1]->y, point_list[2]->x, point_list[2]->y);//BC	
shape->add_line_net_dut(point_list[4]->x, point_list[4]->y, point_list[5]->x, point_list[5]->y);//EF
shape->add_line_net_dut(point_list[5]->x, point_list[5]->y, point_list[6]->x, point_list[6]->y);//FG
shape->add_line(point_list[6]->x, point_list[6]->y, point_list[7]->x, point_list[7]->y);//GH
shape->add_line(point_list[7]->x, point_list[7]->y, point_list[4]->x, point_list[4]->y);//HE
shape->add_line(point_list[0]->x, point_list[0]->y, point_list[4]->x, point_list[4]->y);//AE
shape->add_line_net_dut(point_list[1]->x, point_list[1]->y, point_list[5]->x, point_list[5]->y);//BF
shape->add_line(point_list[2]->x, point_list[2]->y, point_list[6]->x, point_list[6]->y);//CG
shape->add_line(point_list[3]->x, point_list[3]->y, point_list[7]->x, point_list[7]->y);//DH